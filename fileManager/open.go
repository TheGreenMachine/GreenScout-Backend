// A wrapper around os.OpenFile() and os.Create() in order to allow files to be edited without restricting them to sudo-only.
package filemanager

import (
	"os"
	"os/exec"
	"strings"
)

// Opens a file, creating it if it does not exist. Allows editing and reading.
// After opening, it will change the file's permissions to rwxrwxrwx.
// Similar to os.Create().
// Returns The pointer to a the file, and the error generated by os.OpenFile().
func OpenWithPermissions(filepath string) (*os.File, error) {
	file, err := os.OpenFile(filepath, os.O_RDWR|os.O_CREATE|os.O_TRUNC, os.ModePerm)
	os.Chmod(filepath, 0777)
	return file, err
}

// Writes to a file, creating it if it does not exist.
// After writing, it will change the file's permissions to rwxrwxrwx.
// Similar to os.WriteFile().
// Takes in the path to write to and the data to write.
// Returns error generated by os.WriteFile().
func WriteFileWithPermissions(filepath string, data []byte) error {
	err := os.WriteFile(filepath, data, os.ModePerm)
	os.Chmod(filepath, 0777)
	return err
}

// Creates a directory and all directories specified in the path passed in if they do not exist.
// After creating, it will change the directories' permissions to rwxrwxrwx.
// Similar to os.MkdirAll().
// Returns the error generated by os.MkdirAll().
func MkDirWithPermissions(filepath string) error {
	err := os.MkdirAll(filepath, os.ModePerm)
	os.Chmod(filepath, 0777)
	return err
}

// Runs the whoami command. If the result is root, it will return true.
// Used to determine if the server is being run with super-user permissions.
func IsSudo() bool {
	out, _ := exec.Command("whoami").Output()
	return strings.Contains(string(out), "root")
}
